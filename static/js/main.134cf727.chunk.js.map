{"version":3,"sources":["сomponents/BuilderControls.js","helpers/vectors.js","helpers/map.js","сomponents/GridRenderer.js","сomponents/ControlWrap.js","сomponents/controls/NumberSelector.js","сomponents/controls/ArraySelector.js","helpers/path_finder.js","сomponents/Builder.js","App.js","reportWebVitals.js","index.js"],"names":["BuilderControls","props","className","children","map","child","index","MOVING_DIRECTIONS","x","y","createVector","cloneVector","v","LOCALSTORAGE_MAP_ID","ALL_BLOCK_TYPES","id","name","createMapOfSize","size","Array","fill","_","findPositionOfBlockTypeOnMap","blockType","length","setValueOnMap","point","value","GridRenderer","console","log","blockTypeCollection","forEach","type","row","yIndex","el","xIndex","isPathClass","path","find","p","blockTypeClass","toLowerCase","onClick","onCellClick","handleCellClick","ControlWrap","NumberSelector","onChanged","ArraySelector","list","item","selected","onChange","isLegitPointOnMap","position","maxValue","isLegitPointOnModel","model","closed","getCellInfoOnModel","finish","spendedCost","parent","a","b","vectorLength","Math","abs","fullCost","oldCell","prevFullCost","Cost","remainingCost","pathfinderIteration","start","spendedWay","dir","newPoint","cellInfo","nextSearch","cheapestCost","cheapestPos","cell","cellCoast","findCheapestPointOnModel","findPathOnMap","startPos","finishPos","Error","finishedModel","mapSize","getInitPathfinderModel","exit","currentPos","push","extractWayFromModel","Builder","useState","worldSize","setWorldSize","setMap","setBlockType","setPath","loadMapFromStorage","storedMap","localStorage","getItem","JSON","parse","useEffect","newBlockType","existedBlockPos","iteration","newSize","newMap","oldMap","sizeDifference","slice","fillerArray","resizeMapToSize","setItem","stringify","wayModel","err","error","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.134cf727.chunk.js","sourcesContent":["import React from 'react';\n\nimport './BuilderControls.scss'\n\nexport function BuilderControls(props) {\n    return (\n        <div className=\"builder-controls__container\">\n            <div className=\"builder-controls__name\">\n                Control your world:\n            </div>\n            <div className=\"builder-controls__proxy-box\">\n                {props.children.map((child, index) => \n                    <div key={index} className=\"builder-controls__child-box\">\n                        {child}\n                    </div>\n                )}\n            </div>\n        </div>\n    )\n}","export const DIR_UP    = '[DIRECTION] DIR_UP';\nexport const DIR_UP_RIGHT    = '[DIRECTION] DIR_UP_RIGHT';\nexport const DIR_RIGHT = '[DIRECTION] DIR_RIGHT';\nexport const DIR_RIGHT_DOWN = '[DIRECTION] DIR_RIGHT_DOWN';\nexport const DIR_DOWN  = '[DIRECTION] DIR_DOWN';\nexport const DIR_DOWN_LEFT  = '[DIRECTION] DIR_DOWN_LEFT';\nexport const DIR_LEFT  = '[DIRECTION] DIR_LEFT';\nexport const DIR_LEFT_UP  = '[DIRECTION] DIR_LEFT_UP';\n\nexport const MOVING_DIRECTIONS = {    \n    [DIR_UP]:    { x:  0, y: -1 },\n    [DIR_UP_RIGHT]:    { x:  1, y: -1 },\n    [DIR_RIGHT]: { x:  1, y:  0 },\n    [DIR_RIGHT_DOWN]: { x:  1, y:  1 },\n    [DIR_DOWN]:  { x:  0, y:  1 },\n    [DIR_DOWN_LEFT]:  { x:  -1, y:  1 },\n    [DIR_LEFT]:  { x: -1, y:  0 },\n    [DIR_LEFT_UP]:  { x: -1, y:  -1 },\n}\n\nexport const createVector = (x, y) => {\n    return { x, y };\n};\n\nexport const cloneVector = (v) => {\n    return {\n        ...v\n    }\n};\n\nexport const summVectors = (a, b) => {\n    return {\n        x: a.x + b.x,\n        y: a.y + b.y\n    }\n};\n\nexport const subsractVectors = (a, b) => {\n    return {\n        x: a.x - b.x,\n        y: a.y - b.y\n    }\n};\n\nexport const absVector = (v) => {\n    return {\n        x: Math.abs(v.x),\n        y: Math.abs(v.y)\n    }\n}\n\nexport const isVectorsEqual = (a, b) => {\n    return a.x === b.x && a.y === b.y;\n};\n","import { createVector } from \"./vectors\";\n\nexport const LOCALSTORAGE_MAP_ID = '[Local storage] MapID'\n\nexport const EMPTY_BLOCK_ID = 0;\n\nexport const WALL_BLOCK_ID = 1;\nexport const WALL_BLOCK_NAME = \"Wall\";\nexport const WALL_BLOCK = {\n    id: WALL_BLOCK_ID,\n    name: WALL_BLOCK_NAME\n}\n\nexport const START_BLOCK_ID = 2;\nexport const START_BLOCK_NAME = \"Start\";\nexport const START_BLOCK = {\n    id: START_BLOCK_ID,\n    name: START_BLOCK_NAME\n}\n\nexport const FINISH_BLOCK_ID = 3;\nexport const FINISH_BLOCK_NAME = \"Finish\";\nexport const FINISH_BLOCK = {\n    id: FINISH_BLOCK_ID,\n    name: FINISH_BLOCK_NAME\n}\n\nexport const ALL_BLOCK_TYPES = [\n    WALL_BLOCK,\n    START_BLOCK,\n    FINISH_BLOCK\n];\n\nexport function createMapOfSize(size) {\n    return new Array(size).fill(0).map(\n        _ => new Array(size).fill(EMPTY_BLOCK_ID)\n    );\n}\n\nexport function resizeMapToSize(oldMap, size) {\n    const sizeDifference = oldMap.length - size;\n    let newMap = null;\n\n    if (sizeDifference === 0) {\n        return oldMap;\n    } else if (sizeDifference >= 1) {\n        newMap = new Array(size).fill(null).map((_, index) => {\n            return oldMap[index].slice(0, size);\n        });\n    } else {\n        let fillerArray = new Array(Math.abs(sizeDifference)).fill(0);\n        newMap = new Array(size).fill(null).map((_, index) => {\n            if (!!oldMap[index]) {\n                return [...oldMap[index], ...fillerArray];\n            } else {\n                return new Array(size).fill(0);\n            }\n        });\n    }\n\n    return newMap;\n}\n\nexport function findPositionOfBlockTypeOnMap(map, blockType) {\n    for (let y = 0; y < map.length; y++) {\n        for (let x = 0; x < map[y].length; x++) {\n            if (map[y][x] === blockType) {\n                return createVector(x, y);\n            }\n        }\n    }\n\n    return null;\n}\n\nexport function setValueOnMap(map, point, value) {\n    const { x, y } = point;\n    map[y][x] = value;\n}","import React from 'react';\nimport { ALL_BLOCK_TYPES } from '../helpers/map';\nimport { createVector, isVectorsEqual } from '../helpers/vectors';\n\nimport './GridRenderer.scss';\n\nexport function GridRenderer(props) {\n    console.log(props);\n\n    const blockTypeCollection = {};\n    ALL_BLOCK_TYPES.forEach(type => { blockTypeCollection[type.id] = type.name });\n    \n    function handleCellClick(x, y) {\n        const point = createVector(x, y);\n        !!props.onCellClick && props.onCellClick(point);\n    }\n\n    return (\n        !!props.map && \n        <div className=\"grid-renderer__container\">\n            <div className=\"grid-renderer__content\">\n                {\n                    props.map.map((row, yIndex) => \n                        <div className=\"grid-renderer__row\" key={'row_'+yIndex}>\n                            {row.map((el, xIndex) => {\n                                const isPathBlock = !!props.path && !!props.path.find(p => p.x === xIndex && p.y === yIndex);\n                                const isPathClass =  isPathBlock ? 'grid-renderer__cell__path' : '';\n                                const blockTypeClass = !!el ? 'grid-renderer__cell__' + blockTypeCollection[el].toLowerCase() : '';\n                                return (<div className={`grid-renderer__cell ${isPathClass} ${blockTypeClass}`}\n                                     key={`cell_${xIndex}:${yIndex}`}\n                                     onClick={_ => handleCellClick(xIndex, yIndex)}></div>)\n                                }\n                            )}\n                        </div>\n                    )\n                }\n            </div>\n        </div>        \n    )\n}\n","import React from 'react';\n\nimport './ControlWrap.scss';\n\nexport function ControlWrap(props) {\n    return (\n        <div className=\"control-wrap__container\">\n            <div className=\"control-wrap__name\">{props.name}: </div>\n            <div className=\"control-wrap__proxy-box\">{props.children || 'placeholder'}</div>\n        </div>\n    )\n}","import React from 'react';\n\nimport './NumberSelector.scss';\n\nexport function NumberSelector(props) {\n    return (\n        <div className=\"number-selector__container\">\n            <div className=\"number-selector__control\" onClick={_ => props.onChanged(-1)}>-</div>\n            <div className=\"number-selector__display\">{props.value}</div>\n            <div className=\"number-selector__control\" onClick={_ => props.onChanged(1)}>+</div>\n        </div>\n    )\n}","import React from 'react';\n\nimport './ArraySelector.scss';\n\nexport function ArraySelector(props) {\n\n    function handleClick(id) {\n        props.onChange && props.onChange(id);\n    }\n\n    return (\n        <div className=\"array-selector__container\">\n            { props.list.map((item) => \n                <div className={`array-selector__item ${item.id === props.selected ? 'array-selector__item__selected' : ''}`} \n                    key={item.id} \n                    onClick={_ => handleClick(item.id)}>{ item.name }</div>\n            )}\n        </div>\n    )\n}","import { findPositionOfBlockTypeOnMap, FINISH_BLOCK_ID, START_BLOCK_ID, WALL_BLOCK_ID } from \"./map\";\nimport { absVector, createVector, isVectorsEqual, MOVING_DIRECTIONS, subsractVectors, summVectors, cloneVector } from \"./vectors\";\n\nconst MAX_PATHFINDER_DEPTH = 100;\n\nfunction isLegitPointOnMap(map, position) {\n    const { x, y } = position;\n    const minValue = 0;\n    const maxValue = map.length;\n    return x >= minValue \n        && y >= minValue \n        && x < maxValue \n        && y < maxValue\n        && map[y][x] !== WALL_BLOCK_ID;\n}\n\nfunction isLegitPointOnModel(model, position) {\n    const { x, y } = position;\n    return (!model[y][x] || !model[y][x].closed);\n}\n\nfunction getCellInfoOnModel(model, position, finish, spendedCost, parent) {\n    const vectorLength = absVector(subsractVectors(position, finish));\n    const length = vectorLength.x + vectorLength.y;\n    const fullCost = length + spendedCost;\n\n    const oldCell = model[position.y][position.x];\n    const prevFullCost = !!oldCell ? oldCell.Cost + oldCell.spendedCost : null;\n\n    return (!prevFullCost || prevFullCost > fullCost)\n        ? { remainingCost: length, spendedCost, parent, closed: false }\n        : oldCell;\n}\n\nfunction getInitPathfinderModel(map, start, finish) {\n    const mapSize = map.length;\n    const model = new Array(mapSize).fill(0).map(_ => new Array(mapSize).fill(null));\n    model[start.y][start.x] = getCellInfoOnModel(model, start, finish, 0, null);\n\n    return model;\n}\n\nfunction findCheapestPointOnModel(model) {\n    let cheapestCost = null;\n    let cheapestPos = null;\n    \n    model.forEach((row, y) => {\n        row.forEach((cell, x) => {\n            if (!cell || !!cell.closed) return;\n            \n            const cellCoast = cell.spendedCost + cell.remainingCost;\n            if (!!cheapestCost && cheapestCost <= cellCoast) return;\n            \n            cheapestCost = cellCoast;\n            cheapestPos = createVector(x, y);\n        });\n    });\n\n    return cheapestPos;\n}\n\nfunction extractWayFromModel(model, start, finish) {\n    const path = [];\n    if (!model[finish.y][finish.x]) return path;\n    let exit = false;\n    let currentPos = cloneVector(finish);\n    path.push(currentPos);\n    \n    while (!exit) {\n        currentPos = cloneVector(model[currentPos.y][currentPos.x].parent);\n        path.push(currentPos);\n        \n        if (isVectorsEqual(currentPos, start)) \n            exit = true;\n    }\n\n    return path;\n}\n\nfunction pathfinderIteration(map, start, finish, model, spendedWay) {\n    if (spendedWay > MAX_PATHFINDER_DEPTH) return model;\n\n    model[start.y][start.x].closed = true;\n\n    for (let dir in MOVING_DIRECTIONS) {\n        const newPoint = summVectors(start, MOVING_DIRECTIONS[dir]);\n        if (isLegitPointOnMap(map, newPoint) && isLegitPointOnModel(model, newPoint)) {\n            const cellInfo = getCellInfoOnModel(model, newPoint, finish, spendedWay + 1, start);\n            if (cellInfo !== model[newPoint.y][newPoint.x]) model[newPoint.y][newPoint.x] = cellInfo;\n\n            if (cellInfo.remainingCost === 0) return model;\n        }\n    }\n\n    const nextSearch = findCheapestPointOnModel(model);\n\n    if (!nextSearch) return model;\n\n    return pathfinderIteration(map, nextSearch, finish, model, spendedWay + 1);\n}\n\nexport function findPathOnMap(map) {\n    const startPos = findPositionOfBlockTypeOnMap(map, START_BLOCK_ID);\n    const finishPos = findPositionOfBlockTypeOnMap(map, FINISH_BLOCK_ID);\n\n    if (!startPos || !finishPos) return Error('Map should have Start and Finish');\n\n    const model = getInitPathfinderModel(map, startPos, finishPos);\n\n    const finishedModel = pathfinderIteration(map, startPos, finishPos, model, 1);\n\n    console.log(finishedModel);\n\n    const finalWay = extractWayFromModel(finishedModel, startPos, finishPos);\n\n    return finalWay;\n}","import React, { useEffect, useState } from 'react';\nimport { BuilderControls } from './BuilderControls';\nimport { GridRenderer } from './GridRenderer';\nimport { ControlWrap } from './ControlWrap'; \nimport { NumberSelector } from './controls/NumberSelector';\nimport { ArraySelector } from './controls/ArraySelector';\nimport { \n    ALL_BLOCK_TYPES, \n    createMapOfSize, \n    EMPTY_BLOCK_ID, \n    findPositionOfBlockTypeOnMap, \n    resizeMapToSize, \n    setValueOnMap, \n    START_BLOCK_ID, \n    FINISH_BLOCK_ID, \n    WALL_BLOCK_ID, \n    LOCALSTORAGE_MAP_ID} from '../helpers/map';\n\nimport './Builder.scss';\nimport { findPathOnMap } from '../helpers/path_finder';\n\nexport function Builder() {\n    const [worldSize, setWorldSize] = useState(11);\n    const [map, setMap] = useState(createMapOfSize(worldSize));\n    const [blockType, setBlockType] = useState(WALL_BLOCK_ID);\n    const [path, setPath] = useState(null);\n\n    function handleWorldSizeChange(iteration) {\n        const newSize = worldSize + iteration;\n        const newMap = resizeMapToSize(map, newSize);\n        \n        setWorldSize(newSize);\n        setMap(newMap);\n    }\n\n    function handleCellClick(position) {\n        switch (blockType) {\n            case WALL_BLOCK_ID:\n                let newBlockType = map[position.y][position.x] !== WALL_BLOCK_ID\n                    ? WALL_BLOCK_ID\n                    : EMPTY_BLOCK_ID;\n                setValueOnMap(map, position, newBlockType);\n                break;\n            case START_BLOCK_ID:\n            case FINISH_BLOCK_ID:\n                const existedBlockPos = findPositionOfBlockTypeOnMap(map, blockType);\n                if (!!existedBlockPos) setValueOnMap(map, existedBlockPos, EMPTY_BLOCK_ID);\n                setValueOnMap(map, position, blockType);\n\n                setMap(map);\n                break;\n        }\n\n        setMap([...map]);\n    }\n\n    function clearMap() {\n        const newMap = createMapOfSize(worldSize);\n        setMap(newMap);\n    }\n\n    function saveMapToStorage() {\n        localStorage.setItem(LOCALSTORAGE_MAP_ID, JSON.stringify(map));\n    }\n\n    function loadMapFromStorage() {\n        const storedMap = localStorage.getItem(LOCALSTORAGE_MAP_ID);\n        if (!storedMap) return;\n        setMap(JSON.parse(storedMap));\n    }\n\n    function calcWay() {\n        try {\n            const wayModel = findPathOnMap(map);\n            setPath(wayModel);\n        } catch (err) {\n            console.error(err);\n        }\n    }\n\n    useEffect(_ => {\n        loadMapFromStorage();\n    }, []);\n\n    return (\n        <div className=\"builder__wrap\">\n            <div className=\"builder__left-side\">\n                <GridRenderer map={map} path={path} onCellClick={handleCellClick}></GridRenderer>\n            </div>\n            <div className=\"builder__right-side\">\n                <BuilderControls>\n                    <ControlWrap name=\"World Size\">\n                        <NumberSelector value={worldSize} onChanged={handleWorldSizeChange}></NumberSelector>\n                    </ControlWrap>\n                    <ControlWrap name=\"Choose block type\">\n                        <ArraySelector list={ALL_BLOCK_TYPES} selected={blockType} onChange={setBlockType}></ArraySelector>\n                    </ControlWrap>\n                    <br />\n                    <ControlWrap name=\"Map storage\">\n                        <button onClick={clearMap}>Clear</button>\n                        <button onClick={saveMapToStorage}>Save</button>\n                        <button onClick={loadMapFromStorage}>Load</button>\n                    </ControlWrap>\n                    <br />\n                    <ControlWrap name=\"Calculate Way\">\n                        <button onClick={calcWay}>Run</button>\n                    </ControlWrap>\n                </BuilderControls>\n            </div>\n        </div>\n    )\n}","import './App.css';\nimport { Builder } from './сomponents/Builder';\n\nfunction App() {\n  return (\n    <div className=\"app__container\">\n      <header className=\"app__header\">\n        <h1 className=\"app__header-title\">\n          PathFinder: <span className=\"app__header-subtitle\">create map and find the shortest way from point A to point B</span>\n        </h1> \n      </header>\n      <Builder></Builder>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}