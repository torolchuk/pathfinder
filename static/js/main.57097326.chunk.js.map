{"version":3,"sources":["сomponents/BuilderControls.js","helpers/vectors.js","helpers/map.js","сomponents/GridRenderer.js","сomponents/ControlWrap.js","сomponents/controls/NumberSelector.js","сomponents/controls/ArraySelector.js","helpers/path_finder.js","сomponents/Builder.js","App.js","reportWebVitals.js","index.js"],"names":["BuilderControls","props","className","children","map","child","index","DIR_UP","DIR_UP_RIGHT","DIR_RIGHT","DIR_RIGHT_DOWN","DIR_DOWN","DIR_DOWN_LEFT","DIR_LEFT","DIR_LEFT_UP","MOVING_DIRECTIONS","x","y","createVector","cloneVector","v","LOCALSTORAGE_MAP_ID","ALL_BLOCK_TYPES","id","name","createMapOfSize","size","Array","fill","_","findPositionOfBlockTypeOnMap","blockType","length","setValueOnMap","point","value","GridRenderer","blockTypeCollection","forEach","type","row","yIndex","el","xIndex","isPathClass","isArray","path","find","p","blockTypeClass","toLowerCase","onClick","onCellClick","handleCellClick","ControlWrap","NumberSelector","onChanged","ArraySelector","list","item","selected","onChange","DIRECTION_PRICE","isLegitPointOnMap","position","maxValue","isLegitPointOnModel","model","closed","calcMinimalWayCoast","a","b","delta","subsractVectors","Math","abs","min","max","getCellInfoOnModel","finish","spendedCost","parent","remainingCost","fullCost","oldCell","prevFullCost","pathfinderIteration","start","spendedWay","dir","price","newPoint","cellInfo","nextSearch","cheapestCost","cheapestRemainingCost","cheapestPos","cell","cellCost","findCheapestPointOnModel","newSpendedCost","findPathOnMap","startPos","finishPos","exit","currentPos","push","extractWayFromModel","mapSize","getInitPathfinderModel","Error","Builder","useState","worldSize","setWorldSize","setMap","setBlockType","setPath","updateMap","newMap","findedPath","err","console","error","calcWay","loadMapFromStorage","storedMapJSON","localStorage","getItem","storedMap","JSON","parse","useEffect","newBlockType","existedBlockPos","iteration","newSize","oldMap","sizeDifference","slice","fillerArray","resizeMapToSize","setItem","stringify","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.57097326.chunk.js","sourcesContent":["import React from 'react';\n\nimport './BuilderControls.scss'\n\nexport function BuilderControls(props) {\n    return (\n        <div className=\"builder-controls__container\">\n            <div className=\"builder-controls__name\">\n                Control your world:\n            </div>\n            <div className=\"builder-controls__proxy-box\">\n                {props.children.map((child, index) => \n                    <div key={index} className=\"builder-controls__child-box\">\n                        {child}\n                    </div>\n                )}\n            </div>\n        </div>\n    )\n}","export const DIR_UP    = '[DIRECTION] DIR_UP';\nexport const DIR_UP_RIGHT    = '[DIRECTION] DIR_UP_RIGHT';\nexport const DIR_RIGHT = '[DIRECTION] DIR_RIGHT';\nexport const DIR_RIGHT_DOWN = '[DIRECTION] DIR_RIGHT_DOWN';\nexport const DIR_DOWN  = '[DIRECTION] DIR_DOWN';\nexport const DIR_DOWN_LEFT  = '[DIRECTION] DIR_DOWN_LEFT';\nexport const DIR_LEFT  = '[DIRECTION] DIR_LEFT';\nexport const DIR_LEFT_UP  = '[DIRECTION] DIR_LEFT_UP';\n\nexport const MOVING_DIRECTIONS = {    \n    [DIR_UP]:    { x:  0, y: -1 },\n    [DIR_UP_RIGHT]:    { x:  1, y: -1 },\n    [DIR_RIGHT]: { x:  1, y:  0 },\n    [DIR_RIGHT_DOWN]: { x:  1, y:  1 },\n    [DIR_DOWN]:  { x:  0, y:  1 },\n    [DIR_DOWN_LEFT]:  { x:  -1, y:  1 },\n    [DIR_LEFT]:  { x: -1, y:  0 },\n    [DIR_LEFT_UP]:  { x: -1, y:  -1 },\n}\n\nexport const createVector = (x, y) => {\n    return { x, y };\n};\n\nexport const cloneVector = (v) => {\n    return {\n        ...v\n    }\n};\n\nexport const summVectors = (a, b) => {\n    return {\n        x: a.x + b.x,\n        y: a.y + b.y\n    }\n};\n\nexport const subsractVectors = (a, b) => {\n    return {\n        x: a.x - b.x,\n        y: a.y - b.y\n    }\n};\n\nexport const absVector = (v) => {\n    return {\n        x: Math.abs(v.x),\n        y: Math.abs(v.y)\n    }\n}\n\nexport const isVectorsEqual = (a, b) => {\n    return a.x === b.x && a.y === b.y;\n};\n","import { createVector } from \"./vectors\";\n\nexport const LOCALSTORAGE_MAP_ID = '[Local storage] MapID'\n\nexport const EMPTY_BLOCK_ID = 0;\n\nexport const WALL_BLOCK_ID = 1;\nexport const WALL_BLOCK_NAME = \"Wall\";\nexport const WALL_BLOCK = {\n    id: WALL_BLOCK_ID,\n    name: WALL_BLOCK_NAME\n}\n\nexport const START_BLOCK_ID = 2;\nexport const START_BLOCK_NAME = \"Start\";\nexport const START_BLOCK = {\n    id: START_BLOCK_ID,\n    name: START_BLOCK_NAME\n}\n\nexport const FINISH_BLOCK_ID = 3;\nexport const FINISH_BLOCK_NAME = \"Finish\";\nexport const FINISH_BLOCK = {\n    id: FINISH_BLOCK_ID,\n    name: FINISH_BLOCK_NAME\n}\n\nexport const ALL_BLOCK_TYPES = [\n    WALL_BLOCK,\n    START_BLOCK,\n    FINISH_BLOCK\n];\n\nexport function createMapOfSize(size) {\n    return new Array(size).fill(0).map(\n        _ => new Array(size).fill(EMPTY_BLOCK_ID)\n    );\n}\n\nexport function resizeMapToSize(oldMap, size) {\n    const sizeDifference = oldMap.length - size;\n    let newMap = null;\n\n    if (sizeDifference === 0) {\n        return oldMap;\n    } else if (sizeDifference >= 1) {\n        newMap = new Array(size).fill(null).map((_, index) => {\n            return oldMap[index].slice(0, size);\n        });\n    } else {\n        let fillerArray = new Array(Math.abs(sizeDifference)).fill(0);\n        newMap = new Array(size).fill(null).map((_, index) => {\n            if (!!oldMap[index]) {\n                return [...oldMap[index], ...fillerArray];\n            } else {\n                return new Array(size).fill(0);\n            }\n        });\n    }\n\n    return newMap;\n}\n\nexport function findPositionOfBlockTypeOnMap(map, blockType) {\n    for (let y = 0; y < map.length; y++) {\n        for (let x = 0; x < map[y].length; x++) {\n            if (map[y][x] === blockType) {\n                return createVector(x, y);\n            }\n        }\n    }\n\n    return null;\n}\n\nexport function setValueOnMap(map, point, value) {\n    const { x, y } = point;\n    map[y][x] = value;\n}","import React from 'react';\nimport { ALL_BLOCK_TYPES } from '../helpers/map';\nimport { createVector } from '../helpers/vectors';\n\nimport './GridRenderer.scss';\n\nexport function GridRenderer(props) {\n    const blockTypeCollection = {};\n    ALL_BLOCK_TYPES.forEach(type => { blockTypeCollection[type.id] = type.name });\n    \n    function handleCellClick(x, y) {\n        const point = createVector(x, y);\n        !!props.onCellClick && props.onCellClick(point);\n    }\n\n    return (\n        !!props.map && \n        <div className=\"grid-renderer__container\">\n            <div className=\"grid-renderer__content\">\n                {\n                    props.map.map((row, yIndex) => \n                        <div className=\"grid-renderer__row\" key={'row_'+yIndex}>\n                            {row.map((el, xIndex) => {\n                                const isPathBlock = Array.isArray(props.path) && !!props.path.find(p => p.x === xIndex && p.y === yIndex);\n                                const isPathClass =  isPathBlock ? 'grid-renderer__cell__path' : '';\n                                const blockTypeClass = !!el ? 'grid-renderer__cell__' + blockTypeCollection[el].toLowerCase() : '';\n                                return (<div className={`grid-renderer__cell ${isPathClass} ${blockTypeClass}`}\n                                     key={`cell_${xIndex}:${yIndex}`}\n                                     onClick={_ => handleCellClick(xIndex, yIndex)}>\n                                </div>)}\n                            )}\n                        </div>\n                    )\n                }\n            </div>\n        </div>        \n    )\n}\n","import React from 'react';\n\nimport './ControlWrap.scss';\n\nexport function ControlWrap(props) {\n    return (\n        <div className=\"control-wrap__container\">\n            <div className=\"control-wrap__name\">{props.name}: </div>\n            <div className=\"control-wrap__proxy-box\">{props.children || 'placeholder'}</div>\n        </div>\n    )\n}","import React from 'react';\n\nimport './NumberSelector.scss';\n\nexport function NumberSelector(props) {\n    return (\n        <div className=\"number-selector__container\">\n            <div className=\"number-selector__control\" onClick={_ => props.onChanged(-1)}>-</div>\n            <div className=\"number-selector__display\">{props.value}</div>\n            <div className=\"number-selector__control\" onClick={_ => props.onChanged(1)}>+</div>\n        </div>\n    )\n}","import React from 'react';\n\nimport './ArraySelector.scss';\n\nexport function ArraySelector(props) {\n\n    function handleClick(id) {\n        props.onChange && props.onChange(id);\n    }\n\n    return (\n        <div className=\"array-selector__container\">\n            { props.list.map((item) => \n                <div className={`array-selector__item ${item.id === props.selected ? 'array-selector__item__selected' : ''}`} \n                    key={item.id} \n                    onClick={_ => handleClick(item.id)}>{ item.name }</div>\n            )}\n        </div>\n    )\n}","import { findPositionOfBlockTypeOnMap, FINISH_BLOCK_ID, START_BLOCK_ID, WALL_BLOCK_ID } from \"./map\";\nimport { absVector, createVector, isVectorsEqual, subsractVectors, summVectors, cloneVector, \n    MOVING_DIRECTIONS, DIR_UP, DIR_RIGHT, DIR_DOWN, DIR_LEFT, \n    DIR_UP_RIGHT, DIR_RIGHT_DOWN, DIR_DOWN_LEFT, DIR_LEFT_UP } from \"./vectors\";\n\nconst MAX_PATHFINDER_DEPTH = 10000;\n\nconst STANDART_PRICE = 10;\nconst DIAGONAL_PRICE = 14;\nconst DIRECTION_PRICE = {\n    [DIR_UP]: STANDART_PRICE,\n    [DIR_RIGHT]: STANDART_PRICE,\n    [DIR_DOWN]: STANDART_PRICE,\n    [DIR_LEFT]: STANDART_PRICE,\n    [DIR_UP_RIGHT]: DIAGONAL_PRICE,\n    [DIR_RIGHT_DOWN]: DIAGONAL_PRICE,\n    [DIR_DOWN_LEFT]: DIAGONAL_PRICE,\n    [DIR_LEFT_UP]: DIAGONAL_PRICE,\n}\n\nfunction isLegitPointOnMap(map, position) {\n    const { x, y } = position;\n    const minValue = 0;\n    const maxValue = map.length;\n    return x >= minValue \n        && y >= minValue \n        && x < maxValue \n        && y < maxValue\n        && map[y][x] !== WALL_BLOCK_ID;\n}\n\nfunction isLegitPointOnModel(model, position) {\n    const { x, y } = position;\n    return (!model[y][x] || !model[y][x].closed);\n}\n\nfunction calcMinimalWayCoast(a, b) {\n    const delta = absVector(subsractVectors(a, b));\n    const min = Math.min(delta.x, delta.y);\n    const max = Math.max(delta.x, delta.y);\n\n    return (min * DIAGONAL_PRICE) + ((max - min) * STANDART_PRICE);\n}\n\nfunction getCellInfoOnModel(model, position, finish, spendedCost, parent) {\n    const remainingCost = calcMinimalWayCoast(position, finish);\n    const fullCost = remainingCost + spendedCost;\n\n    const oldCell = model[position.y][position.x];\n    const prevFullCost = !!oldCell ? oldCell.remainingCost + oldCell.spendedCost : null;\n\n    return (!prevFullCost || prevFullCost > fullCost)\n        ? { remainingCost, spendedCost, parent, closed: false }\n        : oldCell;\n}\n\nfunction getInitPathfinderModel(map, start, finish) {\n    const mapSize = map.length;\n    const model = new Array(mapSize).fill(0).map(_ => new Array(mapSize).fill(null));\n    model[start.y][start.x] = getCellInfoOnModel(model, start, finish, 0, null);\n\n    return model;\n}\n\nfunction findCheapestPointOnModel(model) {\n    let cheapestCost = null;\n    let cheapestRemainingCost = null;\n    let cheapestPos = null;\n    \n    model.forEach((row, y) => {\n        row.forEach((cell, x) => {\n            if (!cell || !!cell.closed) return;\n            \n            const cellCost = cell.spendedCost + cell.remainingCost;\n            if (!cheapestPos || cheapestCost > cellCost ||\n                (cheapestCost === cellCost && cheapestRemainingCost > cell.remainingCost)) {\n                cheapestCost = cellCost;\n                cheapestRemainingCost = cell.remainingCost;\n                cheapestPos = createVector(x, y);   \n            }\n        });\n    });\n\n    return cheapestPos;\n}\n\nfunction extractWayFromModel(model, start, finish) {\n    const path = [];\n    if (!model[finish.y][finish.x]) return path;\n    let exit = false;\n    let currentPos = cloneVector(finish);\n    path.push(currentPos);\n    \n    while (!exit) {\n        currentPos = cloneVector(model[currentPos.y][currentPos.x].parent);\n        path.push(currentPos);\n        \n        if (isVectorsEqual(currentPos, start)) \n            exit = true;\n    }\n\n    return path;\n}\n\nfunction pathfinderIteration(map, start, finish, model, spendedWay) {\n    if (spendedWay > MAX_PATHFINDER_DEPTH) return model;\n\n    model[start.y][start.x].closed = true;\n\n    for (let dir in MOVING_DIRECTIONS) {\n        const price = DIRECTION_PRICE[dir];\n        const newPoint = summVectors(start, MOVING_DIRECTIONS[dir]);\n        if (isLegitPointOnMap(map, newPoint) && isLegitPointOnModel(model, newPoint)) {\n            const cellInfo = getCellInfoOnModel(model, newPoint, finish, spendedWay + price, start);\n            \n            if (cellInfo !== model[newPoint.y][newPoint.x]) { \n                model[newPoint.y][newPoint.x] = cellInfo;\n            }\n            \n            if (cellInfo.remainingCost === 0) {\n                return model;\n            }\n        }\n    }\n\n    const nextSearch = findCheapestPointOnModel(model);\n    const newSpendedCost = model[nextSearch.y][nextSearch.x].spendedCost;\n\n    if (!nextSearch) return model;\n\n    return pathfinderIteration(map, nextSearch, finish, model, newSpendedCost);\n}\n\nexport function findPathOnMap(map) {\n    const startPos = findPositionOfBlockTypeOnMap(map, START_BLOCK_ID);\n    const finishPos = findPositionOfBlockTypeOnMap(map, FINISH_BLOCK_ID);\n    if (!startPos || !finishPos) return Error('Map should have Start and Finish');\n\n    const initialModel = getInitPathfinderModel(map, startPos, finishPos);\n    const finishedModel = pathfinderIteration(map, startPos, finishPos, initialModel, 0);\n    return extractWayFromModel(finishedModel, startPos, finishPos);\n}\n","import React, { useEffect, useState } from 'react';\nimport { BuilderControls } from './BuilderControls';\nimport { GridRenderer } from './GridRenderer';\nimport { ControlWrap } from './ControlWrap'; \nimport { NumberSelector } from './controls/NumberSelector';\nimport { ArraySelector } from './controls/ArraySelector';\nimport { \n    ALL_BLOCK_TYPES, \n    createMapOfSize, \n    EMPTY_BLOCK_ID, \n    findPositionOfBlockTypeOnMap, \n    resizeMapToSize, \n    setValueOnMap, \n    START_BLOCK_ID, \n    FINISH_BLOCK_ID, \n    WALL_BLOCK_ID, \n    LOCALSTORAGE_MAP_ID} from '../helpers/map';\n\nimport './Builder.scss';\nimport { findPathOnMap } from '../helpers/path_finder';\n\nexport function Builder() {\n    const [worldSize, setWorldSize] = useState(11);\n    const [map, setMap] = useState(createMapOfSize(worldSize));\n    const [blockType, setBlockType] = useState(WALL_BLOCK_ID);\n    const [path, setPath] = useState(null);\n    \n    function handleWorldSizeChange(iteration) {\n        const newSize = worldSize + iteration;\n        const newMap = resizeMapToSize(map, newSize);\n        \n        setWorldSize(newSize);\n        updateMap(newMap);\n    }\n    \n    function updateMap(newMap) {\n        setMap(newMap);\n        calcWay(newMap);\n    }\n\n    function handleCellClick(position) {\n        switch (blockType) {\n            case WALL_BLOCK_ID:\n                let newBlockType = map[position.y][position.x] !== WALL_BLOCK_ID\n                    ? WALL_BLOCK_ID\n                    : EMPTY_BLOCK_ID;\n                setValueOnMap(map, position, newBlockType);\n                break;\n            case START_BLOCK_ID:\n            case FINISH_BLOCK_ID:\n                const existedBlockPos = findPositionOfBlockTypeOnMap(map, blockType);\n                if (!!existedBlockPos) setValueOnMap(map, existedBlockPos, EMPTY_BLOCK_ID);\n                setValueOnMap(map, position, blockType);\n\n                updateMap(map);\n                break;\n            default:\n                break;\n        }\n\n        updateMap([...map]);\n    }\n\n    function clearMap() {\n        const newMap = createMapOfSize(worldSize);\n        updateMap(newMap);\n    }\n\n    function saveMapToStorage() {\n        localStorage.setItem(LOCALSTORAGE_MAP_ID, JSON.stringify(map));\n    }\n\n    function loadMapFromStorage() {\n        const storedMapJSON = localStorage.getItem(LOCALSTORAGE_MAP_ID);\n        const storedMap = JSON.parse(storedMapJSON);\n        if (!storedMap) return;\n        updateMap(storedMap);\n        setWorldSize(storedMap.length);\n    }\n\n    function calcWay(map) {\n        try {\n            const findedPath = findPathOnMap(map);\n            setPath(findedPath);\n        } catch (err) {\n            console.error(err);\n        }\n    }\n\n    useEffect(_ => {\n        loadMapFromStorage();\n    }, []);\n\n    return (\n        <div className=\"builder__wrap\">\n            <div className=\"builder__left-side\">\n                <GridRenderer map={map} path={path} onCellClick={handleCellClick}></GridRenderer>\n            </div>\n            <div className=\"builder__right-side\">\n                <BuilderControls>\n                    <ControlWrap name=\"World Size\">\n                        <NumberSelector value={worldSize} onChanged={handleWorldSizeChange}></NumberSelector>\n                    </ControlWrap>\n                    <ControlWrap name=\"Choose block type\">\n                        <ArraySelector list={ALL_BLOCK_TYPES} selected={blockType} onChange={setBlockType}></ArraySelector>\n                    </ControlWrap>\n                    <br />\n                    <ControlWrap name=\"Map storage\">\n                        <button onClick={clearMap}>Clear</button>\n                        <button onClick={saveMapToStorage}>Save</button>\n                        <button onClick={loadMapFromStorage}>Load</button>\n                    </ControlWrap>\n                    <br />\n                    {\n                        Array.isArray(path) && path.length &&\n                        <ControlWrap name=\"Path length\">\n                            <span>{path.length}</span>\n                        </ControlWrap>\n                    }\n                </BuilderControls>\n            </div>\n        </div>\n    )\n}","import './App.css';\nimport { Builder } from './сomponents/Builder';\n\nfunction App() {\n  return (\n    <div className=\"app__container\">\n      <header className=\"app__header\">\n        <h1 className=\"app__header-title\">\n          PathFinder: <span className=\"app__header-subtitle\">create map and find the shortest way from point A to point B</span>\n        </h1> \n      </header>\n      <Builder></Builder>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}